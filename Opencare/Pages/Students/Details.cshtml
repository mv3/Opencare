@page
@model Opencare.Pages.Students.DetailsModel

@{
    ViewData["Title"] = "Details";
}

<h2>Details</h2>

<div>
    <h4>Student</h4>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.Student.FirstName)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Student.FirstName)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Student.LastName)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Student.LastName)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Student.Birthdate)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Student.Birthdate)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Student.Status)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Student.Status)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.ParentName)
        </dt>
        <dd>
            <a asp-page="/Users/Details" asp-route-id="@Model.Student.ParentID">@Html.DisplayFor(model => model.ParentName)</a>
        </dd>
    </dl>
</div>
@if (Model.Student.Status != EnrollmentStatus.Enrolled)
{
    @if ((await AuthorizationService.AuthorizeAsync(
  User, Model.Student, StudentOperations.Approve)).Succeeded)
    {
        <form style="display:inline;" method="post">
            <input type="hidden" name="id" value="@Model.Student.StudentId" />
            <input type="hidden" name="status" value="@EnrollmentStatus.Enrolled" />
            <button type="submit" class="btn btn-xs btn-success">Approve</button>
        </form>
    }
}

@if (Model.Student.Status != EnrollmentStatus.NotEnrolled)
{
    @if ((await AuthorizationService.AuthorizeAsync(
  User, Model.Student, StudentOperations.Reject)).Succeeded)
    {
        <form style="display:inline;" method="post">
            <input type="hidden" name="id" value="@Model.Student.StudentId" />
            <input type="hidden" name="status" value="@EnrollmentStatus.NotEnrolled" />
            <button type="submit" class="btn btn-xs btn-success">Reject</button>
        </form>
    }
}

<div>
    @if ((await AuthorizationService.AuthorizeAsync(
      User, Model.Student,
      StudentOperations.Update)).Succeeded)
    {
        <a asp-page="./Edit" asp-route-id="@Model.Student.StudentId">Edit</a>
        <text> | </text>
    }
    <a asp-page="./Index">Back to List</a>
</div>

<form method="post" enctype="multipart/form-data">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <input type="hidden" name="id" value="@Model.Student.StudentId" />
    <div class="form-group">
        <label asp-for="StudentDocument.DocumentTypeId" class="control-label"></label>
        <select asp-for="StudentDocument.DocumentTypeId" asp-items="@(new SelectList(Model.DocumentTypes, "Id", "Name"))">
        </select>
        <span asp-validation-for="StudentDocument.DocumentTypeId" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="StudentDocument.Document" class="control-label"></label>
        <input asp-for="StudentDocument.Document" type="file" class="form-control" />
        <span asp-validation-for="StudentDocument.Document" class="text-danger"></span>
    </div>
    <div class="form-group">
        <input type="submit" value="Add Document" asp-page-handler="NewDoc" class="btn btn-default" />
    </div>
</form>

<h4>Documents</h4>

<table class="table">
    <thead>
        <tr>
            <th></th>
            <th></th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.StudentDocs)
        {
        <tr>
            <td>
                <a asp-page="./Details" asp-page-handler="Download" asp-route-id="@item.Id">
                    @Html.DisplayFor(modelItem => item.DocumentType.Name)
                </a>
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.UploadDT)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.UploadUser.UserName)
            </td>
        </tr>
        }
    </tbody>
</table>

<h4>Sign-in Log</h4>

<table class="table">
    <thead>
        <tr>
            <th></th>

            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Student.SignIns.OrderByDescending(s => s.Time))
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Time)
                </td>
                <td>
                    @(item.IsSignedIn ? "In" : "Out")
                </td>
            </tr>
        }
    </tbody>
</table>